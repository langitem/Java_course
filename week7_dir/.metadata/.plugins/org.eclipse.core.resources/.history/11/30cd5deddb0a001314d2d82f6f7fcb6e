// Emanuel Langit
// emanuel.langit@my.ohecampus.com
// CKIT-510
// BlueBallPanel.java
// Application class for assignment 7
// Week 7 Assignment
// August 21, 2013

import java.awt.Color;
//import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JPanel;
import java.lang.Runnable;
import java.util.Random;

public class BlueBallPanel extends JPanel implements Runnable {
	private final int DIAMETER = 10;
	private int x = 1;
	private int y = 1;
	private int changeInX = 1;
	private int changeInY = 1;
	private final int X_MAX = 495;
	private final int Y_MAX = 470;
	private Random randomInt = new Random();
	
	// constructor
	public BlueBallPanel() {
		MouseHandler handler = new MouseHandler();
		addMouseListener( handler );
	}
	
	// draw ball with specified DIAMETER
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		g.setColor(Color.BLUE);
		g.fillOval(x, y, DIAMETER, DIAMETER);
		//Thread blueBallThread = new Thread(this);
		//blueBallThread.start();
	}
	
	/*
	// validate and set DIAMETER, then repaint
	public void setDIAMETER(int newDIAMETER) {
		// if DIAMETER is invalid, default to 10
		DIAMETER = (newDIAMETER >= 0 ? newDIAMETER : 10);
		repaint(); // repaint panel
	}
	*/
	/*
	// use by layout manager to determine preferred size
	public Dimension getPreferredSize() {
		return new Dimension(200, 200);
	}
	*/
	
	private void moveBall() {
		Thread blueBallThread = new Thread(this);
		blueBallThread.start();
	}

	@Override
	public void run() {
		String xDirection = "right";
		String yDirection = "down";
		Boolean justBounced = false;
		//Boolean xJustChangedDirection = false;
		//Boolean yJustChangedDirection = false;
		
		while (true) {
			try {
				Thread.sleep( 10 );
			} catch ( Exception e ) {
				
			}
			
			if (justBounced) {
				changeInX = 1 + randomInt.nextInt(3);
				changeInY = 1 + randomInt.nextInt(3);
			}
			
			if (xDirection.contentEquals("right")) {
				x += changeInX;
				if (x > X_MAX) {
					xDirection = "left";
					justBounced = true;
				} else {
					justBounced = false;
				}
			} else {
				x -= changeInX;
				if (x < 5) {
					xDirection = "right";
					justBounced = true;
				} else {
					justBounced = false;
				}
			}
			
			if (yDirection.contentEquals("down")) {
				y += changeInY;
				if (y > Y_MAX) {
					yDirection = "up";
					justBounced = true;
				} else {
					justBounced = false;
				}
			} else {
				y -= changeInY;
				if (y < 5) {
					yDirection = "down";
					justBounced = true;
				} else {
					justBounced = false;
				}
			}
			
			
			/*
			if (xJustChangedDirection) {
				if (xDirection.contentEquals("right")) {
					xDirection = "left";
				} else {
					xDirection = "right";
				}
			}
			
			if (yJustChangedDirection) {
				if (yDirection.contentEquals("down")) {
					yDirection = "up";
				} else {
					yDirection = "down";
				}
			}
			*/
			repaint();
			
			//System.out.printf("%d, %d\n", x, y);
			//System.out.printf("%s, %s\n", xDirection, yDirection);
			
			//repaint();
		} // end of while loop
		
	} // end of run method
	
	
	private class MouseHandler implements MouseListener {
		public void mouseClicked(MouseEvent event) {
			System.out.println("mouseclicked");
			moveBall();
		}

		@Override
		public void mouseEntered(MouseEvent event) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseExited(MouseEvent event) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mousePressed(MouseEvent event) {
			// TODO Auto-generated method stub
			
		}

		@Override
		public void mouseReleased(MouseEvent event) {
			// TODO Auto-generated method stub
			
		}
	} // end of MouseHandler class

}
